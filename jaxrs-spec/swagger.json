{
  "swagger" : "2.0",
  "info" : {
    "description" : "Che Feature API",
    "version" : "1.0.0",
    "title" : "Che Feature API",
    "contact" : {
      "email" : "skabashniuk@redhat.com"
    },
    "license" : {
      "name" : "Eclipse Public License v1.0",
      "url" : "http://www.eclipse.org/legal/epl-v10.html"
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/skabashniuk/Che/1.0.0",
  "schemes" : [ "https" ],
  "paths" : {
    "/service" : {
      "get" : {
        "summary" : "Searches CheService by list of ids",
        "description" : "Searches  CheService by list of ids, example ?id=io.typefox.theia-ide.che-service:1.2.3&org.eclipse.che.svn:4.2.3",
        "operationId" : "getServiceByIdList",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "list if CheService ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The CheService successfully fetched",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CheService"
              }
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new CheService",
        "description" : "Create a new CheService",
        "operationId" : "addCheService",
        "consumes" : [ "application/json", "application/x-yaml" ],
        "produces" : [ "application/json", "application/x-yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "CheServiceItem",
          "description" : "CheFeature item to add",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CheService"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The CheService successfully created",
            "schema" : {
              "$ref" : "#/definitions/CheService"
            }
          },
          "400" : {
            "description" : "400 Server receives invalid input parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "403 The user does not have access to update resource",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "409 Operation could not be performed because of conflict with prior state.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/service/{name}/{version}" : {
      "get" : {
        "summary" : "Get CheService by name and version",
        "description" : "Get CheService by name and version",
        "operationId" : "getServiceByNameAndVersion",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "CheService name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "CheService version.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The CheService successfully fetched",
            "schema" : {
              "$ref" : "#/definitions/CheService"
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Removes CheService by name and version",
        "description" : "Removes CheService by name and version",
        "operationId" : "deleteServiceByNameAndVersion",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Service name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Service version.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The CheService successfully removed"
          },
          "403" : {
            "description" : "403 The user does not have access to update resource",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "404 The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/feature" : {
      "get" : {
        "summary" : "Searches CheFeature by list of ids",
        "description" : "Searches CheFeature by list of ids. For example, ?id=io.typefox.theia-ide.che-service:1.2.3&org.eclipse.che.svn:4.2",
        "operationId" : "searchFeatureByListOfId",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "list if CheService ids.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "The CheFeature successfully fetched",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CheFeature"
              }
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "summary" : "Create a new CheFeature",
        "description" : "Create a new CheFeature",
        "operationId" : "addFeature",
        "consumes" : [ "application/json", "application/x-yaml" ],
        "produces" : [ "application/json", "application/x-yaml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "CheFeatureItem",
          "description" : "CheFeature item to add",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CheFeature"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The CheFeature successfully created",
            "schema" : {
              "$ref" : "#/definitions/CheFeature"
            }
          },
          "403" : {
            "description" : "403 The user does not have access to update resource",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "404 The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "409 Operation could not be performed because of conflict with prior state.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/feature/{name}/{version}" : {
      "get" : {
        "summary" : "Get CheFeature by name and version",
        "description" : "Get CheFeature by name and version",
        "operationId" : "searchFeatureByNameAndVersion",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "CheFeature name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "CheFeature version.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The CheFeature successfully fetched",
            "schema" : {
              "$ref" : "#/definitions/CheFeature"
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "summary" : "Removes CheFeature by name and version",
        "description" : "Removes CheFeature by name and version",
        "operationId" : "deleteFeatureByNameAndVersion",
        "produces" : [ "application/x-yaml", "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "CheFeature name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "CheFeature version.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "The CheFeature successfully removed"
          },
          "403" : {
            "description" : "403 The user does not have access to update resource",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "404 The specified resource was not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "409 Operation could not be performed because of conflict with prior state.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "500" : {
            "description" : "500 Internal server error occurred",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "CheService" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TypeMeta"
      }, {
        "type" : "object",
        "required" : [ "metadata", "spec" ],
        "properties" : {
          "metadata" : {
            "$ref" : "#/definitions/ObjectMeta"
          },
          "spec" : {
            "$ref" : "#/definitions/CheServiceSpec"
          }
        }
      } ]
    },
    "CheServiceSpec" : {
      "type" : "object",
      "required" : [ "commands", "pods", "services", "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "example" : "1.0.0"
        },
        "services" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Service"
          }
        },
        "pods" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Pod"
          }
        },
        "commands" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CheCommand"
          }
        }
      }
    },
    "Pod" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TypeMeta"
      }, {
        "type" : "object",
        "required" : [ "metadata", "spec" ],
        "properties" : {
          "metadata" : {
            "$ref" : "#/definitions/ObjectMeta"
          },
          "spec" : {
            "$ref" : "#/definitions/PodSpec"
          }
        }
      } ],
      "description" : "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts."
    },
    "PodSpec" : {
      "type" : "object",
      "required" : [ "containers" ],
      "properties" : {
        "containers" : {
          "type" : "array",
          "description" : "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items" : {
            "$ref" : "#/definitions/Container"
          }
        }
      },
      "description" : "PodSpec is a description of a pod."
    },
    "Container" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "image" : {
          "type" : "string",
          "description" : "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets."
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
        },
        "env" : {
          "type" : "array",
          "description" : "List of environment variables to set in the container. Cannot be updated.",
          "items" : {
            "$ref" : "#/definitions/EnvVar"
          }
        },
        "volumeMounts" : {
          "type" : "array",
          "description" : "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items" : {
            "$ref" : "#/definitions/VolumeMount"
          }
        }
      },
      "description" : "A single application container that you want to run within a pod."
    },
    "VolumeMount" : {
      "required" : [ "mountPath", "name" ],
      "properties" : {
        "mountPath" : {
          "type" : "string",
          "description" : "Path within the container at which the volume should be mounted.  Must not contain ':'."
        },
        "mountPropagation" : {
          "type" : "string",
          "description" : "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationHostToContainer is used. This field is alpha in 1.8 and can be reworked or removed in a future release."
        },
        "name" : {
          "type" : "string",
          "description" : "This must match the Name of a Volume."
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
        },
        "subPath" : {
          "type" : "string",
          "description" : "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
        }
      },
      "description" : "VolumeMount describes a mounting of a Volume within a container."
    },
    "EnvVar" : {
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the environment variable. Must be a C_IDENTIFIER."
        },
        "value" : {
          "type" : "string",
          "description" : "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
        }
      },
      "description" : "EnvVar represents an environment variable present in a Container."
    },
    "Service" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TypeMeta"
      }, {
        "type" : "object",
        "required" : [ "metadata", "spec" ],
        "properties" : {
          "metadata" : {
            "$ref" : "#/definitions/ObjectMeta"
          },
          "spec" : {
            "$ref" : "#/definitions/ServiceSpec"
          }
        }
      } ]
    },
    "ServiceSpec" : {
      "type" : "object",
      "properties" : {
        "ports" : {
          "type" : "array",
          "description" : "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "items" : {
            "$ref" : "#/definitions/ServicePort"
          }
        },
        "selector" : {
          "type" : "object",
          "description" : "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "ServiceSpec describes the attributes that a user creates on a service."
    },
    "ServicePort" : {
      "required" : [ "port" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service."
        },
        "nodePort" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The port that will be exposed by this service."
        },
        "protocol" : {
          "type" : "string",
          "description" : "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP."
        },
        "targetPort" : {
          "type" : "string",
          "description" : "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field."
        }
      },
      "description" : "ServicePort contains information on service's port."
    },
    "CheCommand" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TypeMeta"
      }, {
        "type" : "object",
        "required" : [ "metadata", "spec" ],
        "properties" : {
          "metadata" : {
            "$ref" : "#/definitions/ObjectMeta"
          },
          "spec" : {
            "$ref" : "#/definitions/CheCommandSpec"
          }
        }
      } ]
    },
    "CheCommandSpec" : {
      "type" : "object",
      "required" : [ "command", "target-label-selector", "working-dir" ],
      "properties" : {
        "target-label-selector" : {
          "type" : "string",
          "example" : "che.eclipse.org/container-name= theia-maven-sidecar"
        },
        "working-dir" : {
          "type" : "string",
          "example" : "$(project)"
        },
        "command" : {
          "type" : "array",
          "items" : {
            "type" : "string",
            "example" : "mvn"
          }
        }
      }
    },
    "CheFeature" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TypeMeta"
      }, {
        "type" : "object",
        "required" : [ "metadata", "spec" ],
        "properties" : {
          "metadata" : {
            "$ref" : "#/definitions/ObjectMeta"
          },
          "spec" : {
            "$ref" : "#/definitions/CheFeatureSpec"
          }
        }
      } ]
    },
    "CheFeatureSpec" : {
      "type" : "object",
      "required" : [ "services", "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "example" : "1.0.0"
        },
        "services" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CheServiceReference"
          }
        }
      }
    },
    "CheServiceReference" : {
      "type" : "object",
      "required" : [ "name", "version" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "o.typefox.theia-ide.che-service.mainpod"
        },
        "version" : {
          "type" : "string",
          "example" : "51.233"
        },
        "services" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CheServiceParameter"
          }
        }
      }
    },
    "CheServiceParameter" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "THEIA_PLUGINS"
        },
        "value" : {
          "type" : "string",
          "example" : "org.eclipse.che.terminal@latest"
        }
      }
    },
    "TypeMeta" : {
      "type" : "object",
      "required" : [ "apiVersion", "kind" ],
      "properties" : {
        "kind" : {
          "type" : "string",
          "example" : "CheService",
          "description" : "Kind is a string value representing the REST resource this object represents."
        },
        "apiVersion" : {
          "type" : "string",
          "example" : "che.eclipse.org/v1",
          "description" : "APIVersion defines the versioned schema of this representation of an object"
        }
      }
    },
    "ObjectMeta" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "org.eclipse.che.theia.git",
          "description" : "Object name. Name must be unique."
        }
      }
    },
    "Error" : {
      "type" : "object",
      "required" : [ "message" ],
      "properties" : {
        "message" : {
          "type" : "string"
        }
      }
    }
  },
  "responses" : {
    "BadRequestException" : {
      "description" : "400 Server receives invalid input parameter",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "ForbiddenException" : {
      "description" : "403 The user does not have access to update resource",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "NotFoundException" : {
      "description" : "404 The specified resource was not found",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "ConflictException" : {
      "description" : "409 Operation could not be performed because of conflict with prior state.",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "ServerException" : {
      "description" : "500 Internal server error occurred",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}