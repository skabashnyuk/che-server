/*
 * Che Feature API
 * Che Feature API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: skabashniuk@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * CheCommandSpec
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2018-04-10T10:58:20.768Z")
public class CheCommandSpec   {
  @JsonProperty("target-label-selector")
  private String targetLabelSelector = null;

  @JsonProperty("working-dir")
  private String workingDir = null;

  @JsonProperty("command")
  private List<String> command = new ArrayList<String>();

  public CheCommandSpec targetLabelSelector(String targetLabelSelector) {
    this.targetLabelSelector = targetLabelSelector;
    return this;
  }

  /**
   * Get targetLabelSelector
   * @return targetLabelSelector
   **/
  @JsonProperty("target-label-selector")
  @ApiModelProperty(example = "che.eclipse.org/container-name= theia-maven-sidecar", required = true, value = "")
  @NotNull
  public String getTargetLabelSelector() {
    return targetLabelSelector;
  }

  public void setTargetLabelSelector(String targetLabelSelector) {
    this.targetLabelSelector = targetLabelSelector;
  }

  public CheCommandSpec workingDir(String workingDir) {
    this.workingDir = workingDir;
    return this;
  }

  /**
   * Get workingDir
   * @return workingDir
   **/
  @JsonProperty("working-dir")
  @ApiModelProperty(example = "$(project)", required = true, value = "")
  @NotNull
  public String getWorkingDir() {
    return workingDir;
  }

  public void setWorkingDir(String workingDir) {
    this.workingDir = workingDir;
  }

  public CheCommandSpec command(List<String> command) {
    this.command = command;
    return this;
  }

  public CheCommandSpec addCommandItem(String commandItem) {
    this.command.add(commandItem);
    return this;
  }

  /**
   * Get command
   * @return command
   **/
  @JsonProperty("command")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<String> getCommand() {
    return command;
  }

  public void setCommand(List<String> command) {
    this.command = command;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheCommandSpec cheCommandSpec = (CheCommandSpec) o;
    return Objects.equals(this.targetLabelSelector, cheCommandSpec.targetLabelSelector) &&
        Objects.equals(this.workingDir, cheCommandSpec.workingDir) &&
        Objects.equals(this.command, cheCommandSpec.command);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetLabelSelector, workingDir, command);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheCommandSpec {\n");
    
    sb.append("    targetLabelSelector: ").append(toIndentedString(targetLabelSelector)).append("\n");
    sb.append("    workingDir: ").append(toIndentedString(workingDir)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

